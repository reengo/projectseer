<?php
require_once 'Zend/Filter/Inflector.php';
require_once 'library/Filter/StringToCapitalize.php';

class Inflector
{
    private $_target;
    
    /**
     * @var Zend_Filter_Inflector
     */
    private $_zendInflector;
    
    public function __construct($target)
    {
        $this->_target = $target;
        $this->_zendInflector = new Zend_Filter_Inflector();
    }
    
    public function underscore($toLower = true)
    {
        if (empty($this->_target)) {
            return '';
        }
        
        $rules = array('Word_CamelCaseToUnderscore', 'Word_DashToUnderscore');
        if ($toLower) {
            $rules = array_merge($rules, array('StringToLower'));
        }
        
        $this->_zendInflector->setTarget(':name')
                             ->setRules(array(':name' => $rules));
                             
        return $this->_zendInflector->filter(array('name' => $this->_target));
    }
    
    public function humanize()
    {
        if (empty($this->_target)) {
            return '';
        }
        
        $target = $this->underscore(false);
        $this->_zendInflector->setRules(array(':name' => array(
                                            'Word_UnderscoreToSeparator', new Filter_StringToCapitalize())));
        
        return $this->_zendInflector->filter(array(':name' => $target));
    }
    
    public function camelize()
    {
        if (empty($this->_target)) {
            return '';
        }
        
        $string = $this->humanize();
        return str_replace(' ', '', $string);
    }

    public function pluralize($word = null)
    {
        if (null === $word) {
            $word = $this->_target;
        }
        
        $plural = array(
            '/(quiz)$/i'            => '1zes',
            '/^(ox)$/i'             => '1en',
            '/([m|l])ouse$/i'       => '1ice',
            '/(matr|vert|ind)ix|ex$/i' => '1ices',
            '/(x|ch|ss|sh)$/i'      => '1es',
            '/([^aeiouy]|qu)ies$/i' => '1y',
            '/([^aeiouy]|qu)y$/i'   => '1ies',
            '/(hive)$/i'            => '1s',
            '/(?:([^f])fe|([lr])f)$/i' => '12ves',
            '/sis$/i'               => 'ses',
            '/([ti])um$/i'          => '1a',
            '/(buffal|tomat)o$/i'   => '1oes',
            '/(bu)s$/i'             => '1ses',
            '/(alias|status)/i'     => '1es',
            '/(octop|vir)us$/i'     => '1i',
            '/(ax|test)is$/i'       => '1es',
            '/s$/i'                 => 's',
            '/$/'                   => 's'
        );

        $uncountable = array('equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep');

        $irregular = array(
            'person'    => 'people',
            'man'       => 'men',
            'child'     => 'children',
            'sex'       => 'sexes',
            'move'      => 'moves'
        );

        $lowercased_word = strtolower($word);

        foreach ($uncountable as $_uncountable){
            if(substr($lowercased_word,(-1*strlen($_uncountable))) == $_uncountable){
                return $word;
            }
        }

        foreach ($irregular as $_plural=> $_singular){
            if (preg_match('/('.$_plural.')$/i', $word, $arr)) {
                return preg_replace('/('.$_plural.')$/i', substr($arr[0],0,1).substr($_singular,1), $word);
            }
        }

        foreach ($plural as $rule => $replacement) {
            if (preg_match($rule, $word)) {
                return preg_replace($rule, $replacement, $word);
            }
        }
        return false;

    }
    
    public function singularize($word = null)
    {
        if (null === $word) {
            $word = $this->_target;
        }
        
        $singular = array (
            '/(quiz)zes$/i'         => '\1',
            '/(matr)ices$/i'        => '\1ix',
            '/(vert|ind)ices$/i'    => '\1ex',
            '/^(ox)en/i'            => '\1',
            '/(alias|status)es$/i'  => '\1',
            '/([octop|vir])i$/i'    => '\1us',
            '/(cris|ax|test)es$/i'  => '\1is',
            '/(shoe)s$/i'           => '\1',
            '/(o)es$/i'             => '\1',
            '/(bus)es$/i'           => '\1',
            '/([m|l])ice$/i'        => '\1ouse',
            '/(x|ch|ss|sh)es$/i'    => '\1',
            '/(m)ovies$/i'          => '\1ovie',
            '/(s)eries$/i'          => '\1eries',
            '/([^aeiouy]|qu)ies$/i' => '\1y',
            '/([lr])ves$/i'         => '\1f',
            '/(tive)s$/i'           => '\1',
            '/(hive)s$/i'           => '\1',
            '/([^f])ves$/i'         => '\1fe',
            '/(^analy)ses$/i'       => '\1sis',
            '/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i' => '\1\2sis',
            '/([ti])a$/i'           => '\1um',
            '/(n)ews$/i'            => '\1ews',
            '/s$/i'                 => '',
        );

        $uncountable = array('equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep');

        $irregular = array(
            'person'    => 'people',
            'man'       => 'men',
            'child'     => 'children',
            'sex'       => 'sexes',
            'move'      => 'moves'
        );

        $lowercased_word = strtolower($word);
        foreach ($uncountable as $_uncountable){
            if(substr($lowercased_word,(-1*strlen($_uncountable))) == $_uncountable){
                return $word;
            }
        }

        foreach ($irregular as $_plural=> $_singular){
            if (preg_match('/('.$_singular.')$/i', $word, $arr)) {
                return preg_replace('/('.$_singular.')$/i', substr($arr[0],0,1).substr($_plural,1), $word);
            }
        }

        foreach ($singular as $rule => $replacement) {
            if (preg_match($rule, $word)) {
                return preg_replace($rule, $replacement, $word);
            }
        }

        return $word;
    }
}